/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as AuthIndexImport } from './routes/_auth/index'
import { Route as AuthServerRouteImport } from './routes/_auth/server/route'
import { Route as AuthServerSelfImport } from './routes/_auth/server/self'
import { Route as AuthServerServerIdRouteImport } from './routes/_auth/server/$serverId/route'
import { Route as AuthServerServerIdChannelIdRouteImport } from './routes/_auth/server/$serverId/$channelId/route'

// Create/Update Routes

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthServerRouteRoute = AuthServerRouteImport.update({
  id: '/server',
  path: '/server',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthServerSelfRoute = AuthServerSelfImport.update({
  id: '/self',
  path: '/self',
  getParentRoute: () => AuthServerRouteRoute,
} as any)

const AuthServerServerIdRouteRoute = AuthServerServerIdRouteImport.update({
  id: '/$serverId',
  path: '/$serverId',
  getParentRoute: () => AuthServerRouteRoute,
} as any)

const AuthServerServerIdChannelIdRouteRoute =
  AuthServerServerIdChannelIdRouteImport.update({
    id: '/$channelId',
    path: '/$channelId',
    getParentRoute: () => AuthServerServerIdRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth/server': {
      id: '/_auth/server'
      path: '/server'
      fullPath: '/server'
      preLoaderRoute: typeof AuthServerRouteImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/server/$serverId': {
      id: '/_auth/server/$serverId'
      path: '/$serverId'
      fullPath: '/server/$serverId'
      preLoaderRoute: typeof AuthServerServerIdRouteImport
      parentRoute: typeof AuthServerRouteImport
    }
    '/_auth/server/self': {
      id: '/_auth/server/self'
      path: '/self'
      fullPath: '/server/self'
      preLoaderRoute: typeof AuthServerSelfImport
      parentRoute: typeof AuthServerRouteImport
    }
    '/_auth/server/$serverId/$channelId': {
      id: '/_auth/server/$serverId/$channelId'
      path: '/$channelId'
      fullPath: '/server/$serverId/$channelId'
      preLoaderRoute: typeof AuthServerServerIdChannelIdRouteImport
      parentRoute: typeof AuthServerServerIdRouteImport
    }
  }
}

// Create and export the route tree

interface AuthServerServerIdRouteRouteChildren {
  AuthServerServerIdChannelIdRouteRoute: typeof AuthServerServerIdChannelIdRouteRoute
}

const AuthServerServerIdRouteRouteChildren: AuthServerServerIdRouteRouteChildren =
  {
    AuthServerServerIdChannelIdRouteRoute:
      AuthServerServerIdChannelIdRouteRoute,
  }

const AuthServerServerIdRouteRouteWithChildren =
  AuthServerServerIdRouteRoute._addFileChildren(
    AuthServerServerIdRouteRouteChildren,
  )

interface AuthServerRouteRouteChildren {
  AuthServerServerIdRouteRoute: typeof AuthServerServerIdRouteRouteWithChildren
  AuthServerSelfRoute: typeof AuthServerSelfRoute
}

const AuthServerRouteRouteChildren: AuthServerRouteRouteChildren = {
  AuthServerServerIdRouteRoute: AuthServerServerIdRouteRouteWithChildren,
  AuthServerSelfRoute: AuthServerSelfRoute,
}

const AuthServerRouteRouteWithChildren = AuthServerRouteRoute._addFileChildren(
  AuthServerRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthServerRouteRoute: typeof AuthServerRouteRouteWithChildren
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthServerRouteRoute: AuthServerRouteRouteWithChildren,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteRouteWithChildren
  '/server': typeof AuthServerRouteRouteWithChildren
  '/': typeof AuthIndexRoute
  '/server/$serverId': typeof AuthServerServerIdRouteRouteWithChildren
  '/server/self': typeof AuthServerSelfRoute
  '/server/$serverId/$channelId': typeof AuthServerServerIdChannelIdRouteRoute
}

export interface FileRoutesByTo {
  '/server': typeof AuthServerRouteRouteWithChildren
  '/': typeof AuthIndexRoute
  '/server/$serverId': typeof AuthServerServerIdRouteRouteWithChildren
  '/server/self': typeof AuthServerSelfRoute
  '/server/$serverId/$channelId': typeof AuthServerServerIdChannelIdRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_auth/server': typeof AuthServerRouteRouteWithChildren
  '/_auth/': typeof AuthIndexRoute
  '/_auth/server/$serverId': typeof AuthServerServerIdRouteRouteWithChildren
  '/_auth/server/self': typeof AuthServerSelfRoute
  '/_auth/server/$serverId/$channelId': typeof AuthServerServerIdChannelIdRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/server'
    | '/'
    | '/server/$serverId'
    | '/server/self'
    | '/server/$serverId/$channelId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/server'
    | '/'
    | '/server/$serverId'
    | '/server/self'
    | '/server/$serverId/$channelId'
  id:
    | '__root__'
    | '/_auth'
    | '/_auth/server'
    | '/_auth/'
    | '/_auth/server/$serverId'
    | '/_auth/server/self'
    | '/_auth/server/$serverId/$channelId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/server",
        "/_auth/"
      ]
    },
    "/_auth/server": {
      "filePath": "_auth/server/route.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/server/$serverId",
        "/_auth/server/self"
      ]
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/server/$serverId": {
      "filePath": "_auth/server/$serverId/route.tsx",
      "parent": "/_auth/server",
      "children": [
        "/_auth/server/$serverId/$channelId"
      ]
    },
    "/_auth/server/self": {
      "filePath": "_auth/server/self.tsx",
      "parent": "/_auth/server"
    },
    "/_auth/server/$serverId/$channelId": {
      "filePath": "_auth/server/$serverId/$channelId/route.tsx",
      "parent": "/_auth/server/$serverId"
    }
  }
}
ROUTE_MANIFEST_END */
